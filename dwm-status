#!/bin/bash

#
# dwm-status - a status bar for dwm.
# Copyright (c) 2013-2015, Christopher Jeffrey (MIT License).
# https://github.com/chjj/dwm
#

#
# Constants
#

useragent='Mozilla/5.0'

#
# Global Return Value
#

ret=

#
# Timers Hash Table
#

declare -A timers

#
# CPU Usage
# Based on: https://bbs.archlinux.org/viewtopic.php?pid=981274#p981274
#

cpu=
prevtotal=0
previdle=0
get_cpu() {
  local _cpu a b c idle rest
  read _cpu a b c idle rest < /proc/stat
  local total=$((a + b + c + idle))
  local intervaltotal=$((total - prevtotal))
  test $prevtotal -ne 0 \
    && _cpu=$((100 * (intervaltotal - (idle - previdle)) / intervaltotal)) \
    || _cpu=0
  prevtotal=$total
  previdle=$idle
  ret=$_cpu
  cpu=$_cpu
}

#
# CPU Temperature
# See also: $ sensors -f
# Based on: https://bbs.archlinux.org/viewtopic.php?pid=981274#p981274
#

temp=
get_temp() {
  local _temp
  local f=$(find /sys/class/thermal -maxdepth 1 -name 'thermal_zone*' | sort -r | head -n 1)
  read _temp < "${f}/temp"
  #read _temp < /sys/class/thermal/thermal_zone0/temp
  #read _temp < /sys/class/thermal/thermal_zone5/temp
  _temp=$((_temp / 1000))
  ret=$_temp
  temp=$_temp
}

#
# Load
# See also: $ uptime
#

load=
get_load() {
  local _load
  _load=$(cat /proc/loadavg | awk '{ print $1 " " $2 " " $3 }')
  if test "$1" = 'first'; then
    _load=$(echo "$_load" | awk '{ print $1 }')
  fi
  ret=$_load
  load=$_load
}

#
# Memory Usage
#

mem=
get_mem() {
  local cur=$(command free -b | grep Mem: | awk '{ print $3 }')
  local max=$(command free -b | grep Mem: | awk '{ print $2 }')
  #local cur=$(free -m | grep cache: | awk '{ print $3 }')
  #local max=$(free -m | grep Mem | awk '{ print $2 }')
  local _mem
  if test "$1" != 'perc'; then
    _mem="$cur/$max"
  else
    _mem=$((cur * 100 / max))
  fi
  ret=$_mem
  mem=$_mem
}

# Based on: https://bbs.archlinux.org/viewtopic.php?pid=981274#p981274
get__mem() {
  local max cur type size kb _mem

  while read type size kb; do
    test $type = 'MemTotal:' && max=$size && cur=$max
    test $type = 'MemFree:' && cur=$((cur - size))
    test $type = 'Buffers:' && cur=$((cur - size))
    test $type = 'Cached:' && cur=$((cur - size))
  done < /proc/meminfo

  if test "$1" != 'perc'; then
    _mem="$cur/$max"
  else
    _mem=$((cur * 100 / max))
  fi

  ret=$_mem
  mem=$_mem
}

#
# Swap Usage
#

swap=
get_swap() {
  local cur=$(command free -b | grep Swap: | awk '{ print $3 }')
  local max=$(command free -b | grep Swap: | awk '{ print $2 }')
  #local cur=$(free -m | grep Swap | awk '{ print $3 }')
  #local max=$(free -m | grep Swap | awk '{ print $2 }')
  if test $max -eq 0; then
    ret=0
    swap=0
    return
  fi
  local _swap
  if test "$1" != 'perc'; then
    _swap="$cur/$max"
  else
    _swap=$((cur * 100 / max))
  fi
  ret=$_swap
  swap=$_swap
}

# Based on: https://bbs.archlinux.org/viewtopic.php?pid=981274#p981274
get__swap() {
  local max cur type size kb _swap

  while read type size kb; do
    test $type = 'SwapTotal:' && max=$size && cur=$max
    test $type = 'SwapFree:' && cur=$((cur - size))
    test $type = 'SwapCached:' && cur=$((cur - size))
  done < /proc/meminfo

  if test "$1" != 'perc'; then
    _swap="$cur/$max"
  else
    _swap=$((cur * 100 / max))
  fi

  ret=$_swap
  swap=$_swap
}

#
# Total Sockets
# See also:
#  $ netstat -t -s
#  $ lsof -Pn1 +M -i4
#  $ ss -t
#  $ ss -t | grep ^ESTAB
#  /proc/net/sockstat
#  /proc/net/sockstat6
#  /proc/net/tcp
#  /proc/net/tcp6
#

sockets=
get_sockets() {
  local _sockets=$(cat /proc/net/sockstat \
    | grep -m 1 -o 'inuse [0-9]*' \
    | grep -o '[0-9]*')
  ret=$_sockets
  sockets=$_sockets
}

#
# Download
# Based on: https://bbs.archlinux.org/viewtopic.php?pid=981274#p981274
#

down=
oldtotaldown=0
get_down() {
  local _down
  local totaldown=0
  local network
  for network in /sys/class/net/{eth,wlan,enp0s,wlp2s0}*/statistics/rx_bytes; do
    test ! -e "$network" && continue
    read network < $network
    totaldown=$((totaldown + network))
  done
  test $oldtotaldown -ne 0 \
    && _down=$(((totaldown - oldtotaldown) / 1024)) || _down=0
  oldtotaldown=$totaldown
  ret=$_down
  down=$_down
}

#
# Upload
# Based on: https://bbs.archlinux.org/viewtopic.php?pid=981274#p981274
#

up=
oldtotalup=0
get_up() {
  local _up
  local totalup=0
  local network
  for network in /sys/class/net/{eth,wlan,enp0s,wlp2s0}*/statistics/tx_bytes; do
    test ! -e "$network" && continue
    read network < $network
    totalup=$((totalup + network))
  done
  test $oldtotalup -ne 0 \
    && _up=$(((totalup - oldtotalup) / 1024)) || _up=0
  oldtotalup=$totalup
  ret=$_up
  up=$_up
}

#
# SSID
#

ssid=
get_ssid() {
  local _ssid
  if pidof NetworkManager > /dev/null 2>& 1; then
    _ssid=$(_get_ssid_nm)
  elif ps aux | grep -v grep | grep -q wicd-daemon; then
    _ssid=$(_get_ssid_wicd)
  else
    _ssid='Not Connected'
  fi
  test -z "$(echo "$_ssid" | tr -d ' \r\n\t')" && _ssid='Not Connected'
  ret=$_ssid
  ssid=$_ssid
}

_get_ssid_nm() {
  local con=$(nmcli --nocheck c show)
  if echo "$con" | grep -q '[ \t]vpn[ \t].*[ \t][a-zA-Z0-9]\+[ \t]*$'; then
    echo "$con" \
      | grep '[ \t]vpn[ \t]' \
      | grep -v -- '--[ \t]*$' \
      | sed '/^[ \t]*$/d' \
      | awk '{ print $1 }'
    return 0
  fi
  echo "$con" \
    | grep -v -- '--[ \t]*$' \
    | sed '/^[ \t]*$/d' \
    | sed -n 2p \
    | awk '{ print $1 }'
}

_get_ssid_wicd() {
  local data
  data=$(wicd-cli -d --wireless 2> /dev/null)
  if test $? -ne 0; then
    data=$(wicd-cli -d --wired 2> /dev/null)
  fi
  if test $? -ne 0; then
    echo 'Unknown'
    return 1
  fi
  echo "$data" | grep '^Essid:' | awk '{ print $2 }'
}

#
# Time
#

time=
get_time() {
  local _time=$(date '+%a, %b %e - %l:%M%P' | sed 's/-  /- /')
  ret=$_time
  time=$_time
}

#
# Uptime
# See also: /proc/uptime
#

uptime=
get_uptime() {
  local _uptime=$(uptime | awk '{ print $3 " " $4 }' | sed 's/,//')
  ret=$_uptime
  uptime=$_uptime
}

#
# Tasks / Processes
#

tasks=
get_tasks() {
  local _tasks=$(ps -e | wc -l)
  _tasks=$((_tasks - 1))
  ret=$_tasks
  tasks=$_tasks
}

#
# Root Partition
# More verbose: { print $3 "/" $2 " " $5 }
#

root=
get_root() {
  local _root=$(df -h | grep -m 1 ' /$' | awk '{ print $5 }')
  ret=$_root
  root=$_root
}

#
# Home Partition
# More verbose: { print $3 "/" $2 " " $5 }
#

home=
get_home() {
  local _home=$(df -h | grep -m 1 '/home$' | awk '{ print $5 }')
  ret=$_home
  home=$_home
}

#
# Disks
#

disks=
get_disks() {
  get_root "$@"
  get_home "$@"
  local _disks="$root $home"
  ret=$_disks
  disks=$_disks
}

#
# GPU Temperature
#

gputemp=
get_gputemp() {
  local _gputemp
  if which nvidia-settings > /dev/null 2>& 1; then
    _gputemp=$(_get_gputemp_nvidia)
  elif which aticonfig > /dev/null 2>& 1; then
    _gputemp=$(_get_gputemp_ati)
  else
    gputemp='0°C'
  fi
  ret=$_gputemp
  gputemp=$_gputemp
}

_get_gputemp_nvidia() {
  nvidia-settings -tq gpucoretemp
}

_get_gputemp_ati() {
  # https://wiki.archlinux.org/index.php/AMD_Catalyst
  env \
    DISPLAY=:0 \
    WINDOWPATH=1 \
    XAUTHORITY=${HOME}/.Xauthority \
    aticonfig --odgt \
    | tail -n 1 \
    | grep -o '[0-9.]\+ C$' \
    | sed 's/ /°/'
}

#
# Weather
# weather.yahoo.com
# http://developer.yahoo.com/weather/
# To find WOEID: https://weather.yahoo.com/
# Search for: currentWoeid
#

weather=
get_weather() {
  local woeid

  # Minnesota
  # Saint Paul
  # woeid='2487129'
  # West St. Paul
  # woeid='2517692'
  # Invergrove Heights
  # woeid='2427344'
  # Mendota Heights
  # woeid='2449415'
  # SP / IGH / WSP - OLD
  # woeid='12781722'
  # Minneapolis
  # woeid='2452078'

  # New York
  # New York City
  # woeid='2459115'

  # California
  # San Francisco
  woeid='2487956'
  # Los Angeles
  # woeid='2442047'

  # Oregon
  # Portland
  # woeid='2475687'

  # Georgia
  # Atlanta
  # woeid='2357024'

  test -n "$1" && woeid=$1

  # Automatic:
  # test -z "$woeid" && woeid=$(_get_woeid)

  # curl substitute: wget -U "$useragent" -O - "$url" 2> /dev/null
  local _weather=$(curl -s -A "$useragent" \
    "http://xml.weather.yahoo.com/forecastrss?w=${woeid}&u=f" \
    | grep -A 1 'Current Conditions' \
    | tail -n 1 \
    | sed 's/<[^>]\+>//g' \
    | sed 's/ F$/°F/' \
    | xargs)
  test -z "$(echo "$_weather" | tr -d ' \r\n\t')" && _weather='Unknown'
  ret=$_weather
  weather=$_weather
}

_get_woeid() {
  # curl substitute: wget -U "$useragent" -O - "$url" 2> /dev/null
  curl -s -A "$useragent" 'https://weather.yahoo.com/' \
    | grep -o 'currentWoeid \+:[^0-9,]\+\([0-9]\+\)[^0-9,]\+,' \
    | grep -o '[0-9]\+'
}

#
# Local IP Address
# Usage: $ get_addr eth0
# See also: /proc/self/net/arp
#

addr=
get_addr() {
  local _addr
  if test -n "$1"; then
    _addr=$(ip -f inet addr show "$1" | tail -n 1 | awk '{ print $2 }')
  else
    _addr=$(ip addr | grep -m 1 'inet.*\(eth0\|wlan0\|enp0s\)' | awk '{ print $2 }')
  fi
  ret=$_addr
  addr=$_addr
}

#
# Volume / ALSA
#

vol=
get_vol() {
  local mixer='Master'
  test -n "$1" && mixer=$1
  local data=$(amixer get "$mixer")
  local _vol=$(echo "$data" | grep -m 1 -o '[0-9]\+%' | sed 's/%//')
  local mute=$(echo "$data" | grep -m 1 -o '\[off\]')
  local state

  if test -z "$mute" -a "$_vol" = '0' -o -n "$mute"; then
    state='off'
  else
    state='on'
  fi

  case "$state" in
    on)
      #state=''
      state='♫'
      if test "$2" = 'mute'; then
        ret=''
        return 0
      fi
    ;;
    off | *)
      state='M'
      #state='♩'
      if test "$2" = 'mute'; then
        ret=$state
        return 0
      fi
    ;;
  esac

  _vol="$_vol%$state"
  ret=$_vol
  vol=$_vol
}

#
# IP
# Sites:
#  icanhazip.com
#  ifconfig.me/ip
#  ip.appspot.com
#  ipchicken.com
#  ip.dnsexit.com
#  whatismyip.org
#  checkip.dyndns.com
#

ip=
get_ip() {
  # curl substitute: wget -U "$useragent" -O - "$url" 2> /dev/null
  local _ip=$(curl -s -A "$useragent" icanhazip.com)
  #local _ip=$(dig +short myip.opendns.com @resolver1.opendns.com)
  ret=$_ip
  ip=$_ip
}

#
# Battery
# NOTE: some systems use charge_full/charge_now
# instead of energy_full/energy_now.
# Could use energy_full_design instead of energy_full.
#

battery=
battery_f=$(cat /sys/class/power_supply/BAT0/energy_full 2> /dev/null \
  || cat /sys/class/power_supply/BAT0/charge_full 2> /dev/null)
get_battery() {
  local _battery=0
  local battery_n=$(cat /sys/class/power_supply/BAT0/energy_now 2> /dev/null \
    || cat /sys/class/power_supply/BAT0/charge_now 2> /dev/null)
  if test -n "$battery_n"; then
    _battery=$((battery_n * 100 / battery_f))
  fi
  local status=$(cat /sys/class/power_supply/BAT0/status 2> /dev/null \
    || echo 'Unknown')
  case "$status" in
    Full | Charged)
      # status='↯'
      status='F'
    ;;
    Charging)
      status='+'
    ;;
    Discharging)
      status='-'
      # Fix ACPI bug in zenbook ux303 (I love ACPI, almost as much as EFI)
      if acpi 2> /dev/null | grep -q 'discharging at zero rate'; then
        if test $_battery -ge 90; then
          _battery=100
          status='F'
        else
          status='+'
        fi
      fi
    ;;
    Unknown | *)
      # status='⌁'
      status='?'
    ;;
  esac
  _battery="$_battery%$status"
  ret=$_battery
  battery=$_battery
}

get__battery() {
  local data=$(acpi)
  local _battery=$(echo "$data" | grep -m 1 -o '[0-9]\+%' | sed 's/%//')
  local status=$(echo "$data" | sed 's/^.* \([a-zA-Z]\+\),.*$/\1/')
  status=$(echo "$status" | sed 's/^\(.\).*$/\1/')
  _battery="$_battery%$status"
  ret=$_battery
  battery=$_battery
}

#
# Music - MOCP
#

music=

get_music() {
  local _music
  if pidof mocp > /dev/null 2>& 1; then
    _music=$(_get_music_mocp)
  elif pidof ncmpcpp > /dev/null 2>& 1; then
    _music=$(_get_music_ncmpcpp)
  elif pidof mpg123 > /dev/null 2>& 1; then
    _music=$(_get_music_mpg123)
  else
    music='none'
  fi
  ret=$_music
  music=$_music
  return $?
}

_get_music_mocp() {
  local data=$(mocp -i 2> /dev/null)
  if test -z "$data" || echo "$data" | grep -q 'State: STOP'; then
    echo 'none'
    return 1
  fi
  local title=$(echo "$data" | grep '^SongTitle: ' | sed 's/^SongTitle: //')
  if test -z "$title"; then
    title=$(echo "$data" | grep '^Title: ' | sed 's/^Title: //')
  fi
  if test -z "$title"; then
    title=$(echo "$data" | grep '^File: ' | sed 's/^File: //')
    title=$(basename "$title")
  fi
  local left=$(echo "$data" | grep '^TimeLeft: ' | sed 's/^TimeLeft: //')
  if test -z "$left"; then
    local cur=$(echo "$data" | grep '^CurrentTime: ' | sed 's/^CurrentTime: //')
    test -n "$cur" && left="+$cur"
  fi
  echo "$title - $left"
}

_get_music_ncmpcpp() {
  local data=$(ncmpcpp --now-playing '{%a - %t}|{%f}{ - %l}' 2> /dev/null)
  if test -z "$data"; then
    echo 'none'
    return 1
  fi
  echo "$data"
}

_get_music_mpg123() {
  ps ax \
    | grep -v grep \
    | grep mpg123 \
    | awk '{ print $6 }' \
    | xargs basename
}

#
# Touchpad
#

touchpad=
get_touchpad() {
  touchpad=$(synclient -l | grep -q 'TouchpadOff.*=.*0' && echo 'T' || echo 'N')
  ret=$touchpad
}

#
# Timer
# To use a longer timer in main():
#  timer $((2 * 60 * 60)) get_weather
#  timer $((5 * 60 * 60)) get_ip
#

timer() {
  local interval=$1
  local name=$2
  shift
  shift

  local tval=$(date '+%s')
  local lval=$(eval 'echo $l_'${name})
  #local lval=${timers[$name]}
  test -z "$lval" && lval=0

  if test $((tval - lval)) -gt $interval; then
    if test $lval -eq 0; then
      # If it's the first iteration, wait a bit
      # because it might fail due to the network
      # not being up.
      # if ! ping -W 5 -c 1 google.com > /dev/null 2>& 1; then
      #   sleep 5
      # fi
      tval=$(date '+%s')
    fi

    "$name" "$@"
    eval l_${name}="'$tval'"
    #timers[$name]=$tval
    return 0
  fi

  return 1
}

#
# Main
#

main() {
  local out interval

  # Get a certain value.
  if test "$1" = 'get'; then
    local cmd=$2
    shift
    shift
    "get_$cmd" "$@"
    echo "$ret"
    exit 0
  fi

  # Display message on the status bar.
  if test "$1" = 'msg'; then
    shift
    echo "$@" > ~/.dwm-msg
    exit 0
  fi

  # Daemonize the process.
  # if test -z "$DWM_STATUS_DAEMONIZED"; then
  #   (DWM_STATUS_DAEMONIZED=1 setsid "$0" "$@" > /dev/null 2>& 1 &)
  #   exit 0
  # fi

  interval=$1

  # Make a fifo to read from fd for timeouts
  # http://unix.stackexchange.com/questions/68236
  tfifo=/tmp/dwm_status_sleep_fifo_353463524
  rm -f $tfifo
  mkfifo $tfifo
  exec 200<> $tfifo

  # enable -f /usr/lib/bash_sleep_builtin.so sleep

  while true; do
    get_cpu
    get_temp
    get_load first
    get_mem perc
    get_swap perc
    get_sockets
    get_down
    get_up
    get_ssid
    get_vol Master
    get_vol Capture mute && cap_mute=$ret
    get_battery
    get_time

    # timer $((8 * 60 * 60)) get_ip

    if test "$weather" = 'Unknown'; then
      timer $((5 * 60)) get_weather
    else
      timer $((20 * 60)) get_weather
    fi

    out=$(
      echo -n "${cpu}%"
      echo -n ' '
      echo -n "${temp}°C"
      echo -n ' '
      echo -n "${load}"
      echo -n ' • '
      echo -n "${mem}%"
      echo -n '+'
      echo -n "${swap}%"
      echo -n ' • '
      echo -n "${sockets}s"
      echo -n ' '
      echo -n "${down}d"
      echo -n ' '
      echo -n "${up}u"
      echo -n ' • '
      echo -n "${ssid}"
      # echo -n ' • '
      # echo -n "${ip}"
      echo -n ' • '
      echo -n "${vol}${cap_mute}"
      echo -n ' • '
      echo -n "${battery}"
      echo -n ' • '
      echo -n "${weather}"
      echo -n ' • '
      echo -n "${time}"
    )

    if test -f ~/.dwm-msg; then
      out="$(cat ~/.dwm-msg) • $out"
      rm ~/.dwm-msg
    fi

    if test -n "$DISPLAY"; then
      xsetroot -display "$DISPLAY" -name "$out"
    else
      if test -n "$interval"; then
        printf '\r\x1b[K%s' "$out"
      fi
    fi

    if test -z "$interval"; then
      echo "$out"
      exit 0
    fi

    # sleep "$interval"
    read -t "$interval" -u 200 _none
  done
}

#
# Execute
#

main "$@"
